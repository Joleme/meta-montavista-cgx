diff -Naur gst-ffmpeg-0.10.13_org/configure.ac gst-ffmpeg-0.10.13/configure.ac
--- gst-ffmpeg-0.10.13_org/configure.ac	2012-11-26 17:11:22.606519147 +0530
+++ gst-ffmpeg-0.10.13/configure.ac	2012-11-26 17:12:17.942521302 +0530
@@ -333,7 +333,7 @@
   target_os=`echo $host_os | sed 's/-gnu//'`
   if test "x$cross_compiling" = xyes; then
     embffmpeg_configure_args="$embffmpeg_configure_args --enable-cross-compile \
-        --target-os=$target_os --arch=$host_cpu --cross-prefix=$host_alias-"
+	--target-os=$target_os --arch=$host_cpu	--cross-prefix=$TARGET_PREFIX"
   fi
 
   case $host_os in
diff -Naur gst-ffmpeg-0.10.13_org/gst-libs/ext/libav/configure gst-ffmpeg-0.10.13/gst-libs/ext/libav/configure
--- gst-ffmpeg-0.10.13_org/gst-libs/ext/libav/configure	2012-11-26 17:11:22.606519147 +0530
+++ gst-ffmpeg-0.10.13/gst-libs/ext/libav/configure	2012-11-26 17:14:56.198527464 +0530
@@ -1828,7 +1828,7 @@
 set_default arch target_os
 
 ar_default="${cross_prefix}${ar_default}"
-cc_default="${cross_prefix}${cc_default}"
+cc_default="${cross_prefix}${cc_default} $TARGET_CC_ARCH"
 nm_default="${cross_prefix}${nm_default}"
 pkg_config_default="${cross_prefix}${pkg_config_default}"
 ranlib="${cross_prefix}${ranlib}"
@@ -1967,7 +1967,7 @@
         die "Error creating armcc configuration file."
     $cc --vsn | grep -q RVCT && armcc_opt=rvct || armcc_opt=armcc
     cc="$cc --arm_linux_config_file=$armcc_conf --translate_gcc"
-    as_default="${cross_prefix}gcc"
+    as_default="${cross_prefix}gcc $TARGET_CC_ARCH"
     CC_DEPFLAGS='-MMD'
     AS_DEPFLAGS='-MMD'
     speed_cflags='-O3'
@@ -1979,8 +1979,8 @@
     cc_ident=$($cc -version | head -n1 | tr -s ' ')
     cc="$cc --gcc --abi=eabi -eo=.o -mc -me"
     CC_O='-fr=$(@D)'
-    as_default="${cross_prefix}gcc"
-    ld_default="${cross_prefix}gcc"
+    as_default="${cross_prefix}gcc $TARGET_CC_ARCH"
+    ld_default="${cross_prefix}gcc $TARGET_LD_ARCH"
     TMPO=$(basename $TMPC .c).o
     append TMPFILES $TMPO
     add_cflags -D__gnuc_va_list=va_list -D__USER_LABEL_PREFIX__=
--- gst-ffmpeg-0.10.13/gst-libs/ext/libav/libavutil/mips/intreadwrite.h_org	2011-11-02 20:46:24.000000000 +0530
+++ gst-ffmpeg-0.10.13/gst-libs/ext/libav/libavutil/mips/intreadwrite.h	2012-11-26 18:56:06.362763827 +0530
@@ -24,75 +24,23 @@
 #include <stdint.h>
 #include "config.h"
 
-#if HAVE_INLINE_ASM
+#if ARCH_MIPS64 && HAVE_INLINE_ASM
 
 #define AV_RN32 AV_RN32
 static av_always_inline uint32_t AV_RN32(const void *p)
 {
+    struct __attribute__((packed)) u32 { uint32_t v; };
+    const uint8_t *q = p;
+    const struct u32 *pl = (const struct u32 *)(q + 3 * !HAVE_BIGENDIAN);
+    const struct u32 *pr = (const struct u32 *)(q + 3 *  HAVE_BIGENDIAN);
     uint32_t v;
     __asm__ ("lwl %0, %1  \n\t"
              "lwr %0, %2  \n\t"
              : "=&r"(v)
-             : "m"(*(const uint32_t *)((const uint8_t *)p+3*!HAVE_BIGENDIAN)),
-               "m"(*(const uint32_t *)((const uint8_t *)p+3*HAVE_BIGENDIAN)));
+             : "m"(*pl), "m"(*pr));
     return v;
 }
 
-#define AV_WN32 AV_WN32
-static av_always_inline void AV_WN32(void *p, uint32_t v)
-{
-    __asm__ ("swl %2, %0  \n\t"
-             "swr %2, %1  \n\t"
-             : "=m"(*(uint32_t *)((uint8_t *)p+3*!HAVE_BIGENDIAN)),
-               "=m"(*(uint32_t *)((uint8_t *)p+3*HAVE_BIGENDIAN))
-             : "r"(v));
-}
-
-#if ARCH_MIPS64
-
-#define AV_RN64 AV_RN64
-static av_always_inline uint64_t AV_RN64(const void *p)
-{
-    uint64_t v;
-    __asm__ ("ldl %0, %1  \n\t"
-             "ldr %0, %2  \n\t"
-             : "=&r"(v)
-             : "m"(*(const uint64_t *)((const uint8_t *)p+7*!HAVE_BIGENDIAN)),
-               "m"(*(const uint64_t *)((const uint8_t *)p+7*HAVE_BIGENDIAN)));
-    return v;
-}
-
-#define AV_WN64 AV_WN64
-static av_always_inline void AV_WN64(void *p, uint64_t v)
-{
-    __asm__ ("sdl %2, %0  \n\t"
-             "sdr %2, %1  \n\t"
-             : "=m"(*(uint64_t *)((uint8_t *)p+7*!HAVE_BIGENDIAN)),
-               "=m"(*(uint64_t *)((uint8_t *)p+7*HAVE_BIGENDIAN))
-             : "r"(v));
-}
-
-#else
-
-#define AV_RN64 AV_RN64
-static av_always_inline uint64_t AV_RN64(const void *p)
-{
-    union { uint64_t v; uint32_t hl[2]; } v;
-    v.hl[0] = AV_RN32(p);
-    v.hl[1] = AV_RN32((const uint8_t *)p + 4);
-    return v.v;
-}
-
-#define AV_WN64 AV_WN64
-static av_always_inline void AV_WN64(void *p, uint64_t v)
-{
-    union { uint64_t v; uint32_t hl[2]; } vv = { v };
-    AV_WN32(p, vv.hl[0]);
-    AV_WN32((uint8_t *)p + 4, vv.hl[1]);
-}
-
-#endif /* ARCH_MIPS64 */
-
-#endif /* HAVE_INLINE_ASM */
+#endif /* ARCH_MIPS64 && HAVE_INLINE_ASM */
 
 #endif /* AVUTIL_MIPS_INTREADWRITE_H */
