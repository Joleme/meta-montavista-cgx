diff -r b90af080f100 mvpartition/Partitioner.py
--- a/mvpartition/Partitioner.py	Tue Mar 08 13:02:33 2011 -0600
+++ b/mvpartition/Partitioner.py	Thu Mar 10 15:46:00 2011 -0600
@@ -1852,8 +1852,8 @@
         if (not val):
             return
 
-        for i in self.partitions:
-            self.delCmd(p, i)
+        while self.partitions:
+            self.delCmd(p, self.partitions[0])
             pass
         self.parent.delCmd(p, self)
         return
@@ -2361,10 +2361,11 @@
         if (not val):
             return
 
-        for v in self.lvols:
-            self.removeLVol(v, p)
+        while self.lvols:
+            self.removeLVol(self.lvols[0], p)
             pass
-        for v in self.pvols:
+        while self.pvols:
+            v = self.pvols[0]
             v.clearVal(p, p.findLine(v))
             pass
         p.deleteLine(p.findLine(self))
@@ -2699,7 +2700,7 @@
             elif (w[2].startswith("md") and ('p' not in w[2])):
                 # Note that the "p" above is important, we need to ignore
                 # RAID partitions and just get the main RAID devices.
-                raids.append("/dev/" + w[2])
+                raids.append(w[2])
                 pass
             l = f.readline()
             pass
@@ -2730,13 +2731,52 @@
 
     # Now handle the raids.
     for r in raids:
-        (numsects, sectsize, tabletype, dlines, err) = _disk_info(r)
-
-        if (err is not None):
-            startup_errs += err + "\n"
+        # Find the raid info in /proc/mdstat
+        o = open("/proc/mdstat")
+        rdevs = []
+        found = False
+        for l in o:
+            if (l[0] == 'm'):
+                w = l.split()
+                if (w[0] != r):
+                    continue
+                pass
+            else:
+                continue
+
+            # We found our raid, extract the info
+            found = True
+            r = "/dev/" + r
+            if (w[2] == "active"):
+                level = w[3]
+                n = 4
+            else:
+                level = "inactive"
+                n = 3
+                pass
+
+            for d in w[n:]:
+                d1 = d.split('[')
+                rdevs.append("/dev/" + d1[0])
+                pass
+
+            break
+        
+        if (not found):
+            startup_errs += "RAID %s not found in /proc/mdstat\n" % r
             continue
 
-        if (tabletype is None):
+        if (level != "inactive"):
+            (numsects, sectsize, tabletype, dlines, err) = _disk_info(r)
+        else:
+            numsects = 0
+            sectsize = 0
+            tabletype = None
+            dlines = None
+            err = None
+            pass
+
+        if (tabletype is None and level != "inactive"):
             # No partition table on the MD device, see what else it could be.
             dest = _process_dev_by_fstab(r, fstab_info)
             if (not dest):
@@ -2747,43 +2787,30 @@
             dest = None
             pass
 
-        o = _call_mdadm(r, "--detail")
-        lines = o.split("\n")
-        found = False
-        for l in lines:
-            w = l.split()
-            if (len(w) == 0):
+        raid = RAID(p, r, numsects, sectsize, tabletype, dest,
+                    level=level)
+
+        for d in rdevs:
+            if (d.startswith("/dev/md/")):
+                # In case /dev/md/x ends up in the raid detail
+                dobj = p.findObj("/dev/md" + d.rsplit("/", 1)[1])
+            else:
+                dobj = p.findObj(d)
                 pass
-            elif (found):
-                if (len(w) < 7):
-                    continue
-                if (w[6].startswith("/dev/md/")):
-                    # In case /dev/md/x ends up in the raid detail
-                    dobj = p.findObj("/dev/md" + w[6].rsplit("/", 1)[1])
-                else:
-                    dobj = p.findObj(w[6])
-                    pass
-                if (dobj is None):
-                    startup_errs += ("Unable to find %s that was in RAID %s\n"
-                                     % (w[6], r))
-                    continue
-                rline = p.findLine(dobj)
-                if (dobj.dest.__class__ == RAIDDest):
-                    dobj.dest.setRAID(p, rline, raid)
-                    pass
-                else:
-                    # Hmm, it's not already a RAID.  Switch it over
-                    dobj.newDest(p, RAIDDest(RAIDValue(raid)), rline,
-                                 doshutdown=False)
-                    pass
-                raid.addVolInit(dobj)
+            if (dobj is None):
+                startup_errs += ("Unable to find %s that was in RAID %s\n"
+                                 % (d, r))
+                continue
+            rline = p.findLine(dobj)
+            if (dobj.dest.__class__ == RAIDDest):
+                dobj.dest.setRAID(p, rline, raid)
                 pass
-            elif (w[0] == "Raid" and w[1] == "Level"):
-                raid = RAID(p, r, numsects, sectsize, tabletype, dest,
-                            level=w[3])
-            elif (w[0] == "Number"):
-                # This is the header for the list of RAID
-                found = True
+            else:
+                # Hmm, it's not already a RAID.  Switch it over
+                dobj.newDest(p, RAIDDest(RAIDValue(raid)), rline,
+                             doshutdown=False)
+                pass
+            raid.addVolInit(dobj)
             pass
 
         if (dlines is not None):
