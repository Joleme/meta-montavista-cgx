#! /bin/sh
#
# Author:  Guido Guenther <agx@sigxcpu.org>
#          MontaVista Software, LLC <source@mvista.com>
# License: 2010 (c) MontaVista Software, LLC. This file is licensed
#          under the terms of the GNU General Public License version 2.
#          This program is licensed "as is" without any warranty of any
#          kind, whether express or implied.
#
# chkconfig: 2345 20 80

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/libvirtd
NAME=libvirtd
DESC="libvirt management daemon"
export PATH

test -x $DAEMON || exit 0

PIDFILE=/var/run/$NAME.pid
DODTIME=1                   # Time to wait for the server to die, in seconds

# Include libvirtd defaults if available
if [ -f /etc/default/libvirtd ] ; then
	. /etc/default/libvirtd
fi

check_start_libvirtd_option() {
  if [ ! "$start_libvirtd" = "yes" ]; then
    log_warning_msg "Not starting libvirt management daemon libvirtd, disabled via /etc/default/libvirtd"
    return 1
  else
    return 0
  fi
}

running_pid()
{
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1 
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected child?
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running()
{
# Check if the process is running looking at /proc
# (works for all users)
    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        [ -n "$DODTIME" ] && sleep "$DODTIME"s
        if running ; then
            kill -9 $pid
            [ -n "$DODTIME" ] && sleep "$DODTIME"s
            if running ; then
                echo "Cannot kill $LABEL (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    return 0
}

log_end_msg() {
	# If no arguments were passed, return
	if [ -z "${1:-}" ]; then
		return 1
	fi

	retval=$1

	if [ $1 -eq 0 ]; then
		echo " done."
	elif [ $1 -eq 255 ]; then
		/bin/echo -e " (warning)."
	else
		/bin/echo -e " failed!"
	fi
	return $retval
}

log_status_msg() {
	if [ -n "$2" ]; then
		echo -n "$1"
	else
		echo "$1"
	fi
}


check_cgroup_mount() {
	if ! cat /proc/filesystems | grep cgroup >/dev/null; then
		# No cgroup filesystem support in the kernel
		return;
	fi
	if cat /proc/mounts | grep '^cgroup_root /sys/fs/cgroup' >/dev/null; then
		# /cgroup is already mounted
		echo 1 > /sys/fs/cgroup/memory/memory.use_hierarchy
		return;
	fi
	

	mount -t tmpfs cgroup_root /sys/fs/cgroup
	mkdir /sys/fs/cgroup/cpuset
	mkdir /sys/fs/cgroup/cpu
	mkdir /sys/fs/cgroup/cpuacct
	mkdir /sys/fs/cgroup/memory
	mkdir /sys/fs/cgroup/devices
	mkdir /sys/fs/cgroup/freezer
	mkdir /sys/fs/cgroup/net_cls
	mkdir /sys/fs/cgroup/blkio
	mkdir /sys/fs/cgroup/perf_event
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,cpuset cgroup_cpuset /sys/fs/cgroup/cpuset
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,cpu cgroup_cpu /sys/fs/cgroup/cpu
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,cpuacct cgroup_cpuacct /sys/fs/cgroup/cpuacct
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,memory cgroup_memory /sys/fs/cgroup/memory
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,devices cgroup_devices /sys/fs/cgroup/devices
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,freezer cgroup_freezer /sys/fs/cgroup/freezer
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,net_cls cgroup_net_cls /sys/fs/cgroup/net_cls
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,blkio cgroup_blkio /sys/fs/cgroup/blkio
	mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,perf_event cgroup_perf_event /sys/fs/cgroup/perf_event
	echo 1 > /sys/fs/cgroup/memory/memory.use_hierarchy
}

mkdir -p /var/run/libvirt
case "$1" in
  start)
	if check_start_libvirtd_option; then
		check_cgroup_mount
		echo -n "Starting $DESC" "$NAME: "
        	if running ;  then
            		log_status_msg "already running"
            		exit 0
        	fi
		rm -f $PIDFILE
		start-stop-daemon --start --quiet --pidfile $PIDFILE \
			--exec $DAEMON -- $libvirtd_opts
		if running; then
			log_end_msg 0
		else
			log_end_msg 1
		fi
	fi
	;;
  stop)
	echo -n "Stopping $DESC" "$NAME: "
	if ! running ;  then
           	log_status_msg "not running"
            	log_end_msg 0
            	exit 0
       	fi
	start-stop-daemon --stop --quiet --pidfile $PIDFILE \
		--exec $DAEMON
	log_end_msg 0
	;;
  force-stop)
	echo -n "Forcefully stopping $DESC" "$NAME: "
	force_stop
	if ! running; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
  restart)
	if check_start_libvirtd_option; then
		check_cgroup_mount
		echo -n "Restarting $DESC" "$DAEMON: "
		start-stop-daemon --oknodo --stop --quiet --pidfile \
			/var/run/$NAME.pid --exec $DAEMON
		[ -n "$DODTIME" ] && sleep $DODTIME
		start-stop-daemon --start --quiet --pidfile \
			/var/run/$NAME.pid --exec $DAEMON -- $libvirtd_opts
		if running; then
			log_end_msg 0
		else
			log_end_msg 1
		fi
	fi
	;;
  reload|force-reload)
  	if running; then
            echo -n "Reloading configuration of $DESC" "$NAME: "
	    start-stop-daemon --stop --signal 1 --quiet --pidfile \
	             /var/run/$NAME.pid --exec $DAEMON
	    log_end_msg 0
	else
            log_warning_msg "libvirtd not running, doing nothing."
	fi
	;;
  status)
        echo -n "Checking status of $DESC" "$NAME: "
        if running ;  then
            log_status_msg "running"
            log_end_msg 0
        else
            log_status_msg "not running"
            log_end_msg 1
	fi
    ;;
  *)
	N=/etc/init.d/libvirtd
	echo "Usage: $N {start|stop|restart|reload|force-reload|status|force-stop}" >&2
	exit 1
	;;
esac

exit 0
