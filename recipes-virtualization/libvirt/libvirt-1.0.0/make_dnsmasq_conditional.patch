Index: libvirt-1.0.0/configure.ac
===================================================================
--- libvirt-1.0.0.orig/configure.ac
+++ libvirt-1.0.0/configure.ac
@@ -279,8 +279,12 @@ dnl External programs that we can use if
 dnl We will hard-code paths to these programs unless we cannot
 dnl detect them, in which case we'll search for the program
 dnl along the $PATH at runtime and fail if it's not there.
-AC_PATH_PROG([DNSMASQ], [dnsmasq], [dnsmasq],
-	[/sbin:/usr/sbin:/usr/local/sbin:$PATH])
+AC_ARG_WITH([dnsmasq],
+  AC_HELP_STRING([--with-dnsmasq], [with dnsmasq - a dhcp and caching dns server @<:@default=no@:>@]),[],[with_dnsmasq=no])
+if test "$with_dnsmasq" = "yes" ; then
+	AC_PATH_PROG([DNSMASQ], [dnsmasq], [dnsmasq],
+		[/sbin:/usr/sbin:/usr/local/sbin:$PATH])
+fi
 AC_PATH_PROG([RADVD], [radvd], [radvd],
 	[/sbin:/usr/sbin:/usr/local/sbin:$PATH])
 AC_PATH_PROG([BRCTL], [brctl], [brctl],
@@ -298,8 +302,10 @@ AC_PATH_PROG([OVSVSCTL], [ovs-vsctl], [o
 AC_PATH_PROG([SCRUB], [scrub], [scrub],
 	[/sbin:/usr/sbin:/usr/local/sbin:$PATH])
 
-AC_DEFINE_UNQUOTED([DNSMASQ],["$DNSMASQ"],
-        [Location or name of the dnsmasq program])
+if test "$with_dnsmasq" = "yes" ; then
+	AC_DEFINE_UNQUOTED([DNSMASQ],["$DNSMASQ"],
+		[Location or name of the dnsmasq program])
+fi
 AC_DEFINE_UNQUOTED([RADVD],["$RADVD"],
         [Location or name of the radvd program])
 AC_DEFINE_UNQUOTED([TC],["$TC"],
Index: libvirt-1.0.0/src/conf/network_conf.h
===================================================================
--- libvirt-1.0.0.orig/src/conf/network_conf.h
+++ libvirt-1.0.0/src/conf/network_conf.h
@@ -213,7 +213,9 @@ typedef virNetworkObj *virNetworkObjPtr;
 struct _virNetworkObj {
     virMutex lock;
 
+#ifdef DNSMASQ
     pid_t dnsmasqPid;
+#endif
     pid_t radvdPid;
     unsigned int active : 1;
     unsigned int autostart : 1;
Index: libvirt-1.0.0/src/network/bridge_driver.c
===================================================================
--- libvirt-1.0.0.orig/src/network/bridge_driver.c
+++ libvirt-1.0.0/src/network/bridge_driver.c
@@ -57,7 +57,9 @@
 #include "uuid.h"
 #include "iptables.h"
 #include "logging.h"
+#ifdef DNSMASQ
 #include "dnsmasq.h"
+#endif /* DNSMASQ */
 #include "configmake.h"
 #include "virnetdev.h"
 #include "pci.h"
@@ -70,7 +72,10 @@
 #define NETWORK_PID_DIR LOCALSTATEDIR "/run/libvirt/network"
 #define NETWORK_STATE_DIR LOCALSTATEDIR "/lib/libvirt/network"
 
+#ifdef DNSMASQ
 #define DNSMASQ_STATE_DIR LOCALSTATEDIR "/lib/libvirt/dnsmasq"
+#endif /* DNSMASQ */
+
 #define RADVD_STATE_DIR LOCALSTATEDIR "/lib/libvirt/radvd"
 
 #define VIR_FROM_THIS VIR_FROM_NETWORK
@@ -122,6 +127,7 @@ static void networkRefreshDaemons(struct
 
 static struct network_driver *driverState = NULL;
 
+#ifdef DNSMASQ
 static char *
 networkDnsmasqLeaseFileNameDefault(const char *netname)
 {
@@ -134,6 +140,7 @@ networkDnsmasqLeaseFileNameDefault(const
 
 networkDnsmasqLeaseFileNameFunc networkDnsmasqLeaseFileName =
     networkDnsmasqLeaseFileNameDefault;
+#endif /* DNSMASQ */
 
 static char *
 networkRadvdPidfileBasename(const char *netname)
@@ -219,8 +226,10 @@ networkFindActiveConfigs(struct network_
             if (obj->def->ips && (obj->def->nips > 0)) {
                 char *radvdpidbase;
 
+#ifdef DNSMASQ
                 ignore_value(virPidFileReadIfAlive(NETWORK_PID_DIR, obj->def->name,
                                                    &obj->dnsmasqPid, DNSMASQ));
+#endif /* DNSMASQ */
 
                 if (!(radvdpidbase = networkRadvdPidfileBasename(obj->def->name))) {
                     virReportOOMError();
@@ -471,7 +480,7 @@ networkShutdown(void) {
     return 0;
 }
 
-
+#ifdef DNSMASQ
 /* networkKillDaemon:
  *
  * kill the specified pid/name, and wait a bit to make sure it's dead.
@@ -559,7 +568,6 @@ networkBuildDnsmasqHostsfile(dnsmasqCont
     return 0;
 }
 
-
 static int
 networkBuildDnsmasqArgv(virNetworkObjPtr network,
                         virNetworkIpDefPtr ipdef,
@@ -984,6 +992,7 @@ networkRestartDhcpDaemon(virNetworkObjPt
     /* now start dnsmasq if it should be started */
     return networkStartDhcpDaemon(network);
 }
+#endif /* DNSMASQ */
 
 static int
 networkRadvdConfContents(virNetworkObjPtr network, char **configstr)
@@ -1210,7 +1219,7 @@ networkRestartRadvd(virNetworkObjPtr net
          * since there's really no better recovery to be done than to
          * just push ahead (and that may be exactly what's needed).
          */
-        if ((networkKillDaemon(network->dnsmasqPid, "radvd",
+        if ((networkKillDaemon(network->radvdPid, "radvd",
                                network->def->name) >= 0) &&
             ((radvdpidbase = networkRadvdPidfileBasename(network->def->name))
              != NULL)) {
@@ -1248,7 +1257,9 @@ networkRefreshDaemons(struct network_dri
              * dnsmasq and/or radvd, or restart them if they've
              * disappeared.
              */
+#ifdef DNSMASQ
             networkRefreshDhcpDaemon(network);
+#endif
             networkRefreshRadvd(network);
         }
         virNetworkObjUnlock(network);
@@ -1601,7 +1612,7 @@ networkAddGeneralIptablesRules(struct ne
             break;
     }
 
-    /* allow DHCP requests through to dnsmasq */
+    /* allow DHCP requests */
 
     if (iptablesAddTcpInput(driver->iptables, AF_INET,
                             network->def->bridge, 67) < 0) {
@@ -1633,7 +1644,7 @@ networkAddGeneralIptablesRules(struct ne
         VIR_WARN("May need to update iptables package & kernel to support CHECKSUM rule.");
     }
 
-    /* allow DNS requests through to dnsmasq */
+    /* allow DNS requests */
     if (iptablesAddTcpInput(driver->iptables, AF_INET,
                             network->def->bridge, 53) < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
@@ -1650,7 +1661,7 @@ networkAddGeneralIptablesRules(struct ne
         goto err4;
     }
 
-    /* allow TFTP requests through to dnsmasq if necessary */
+    /* allow TFTP requests through */
     if (ipv4def && ipv4def->tftproot &&
         iptablesAddUdpInput(driver->iptables, AF_INET,
                             network->def->bridge, 69) < 0) {
@@ -2158,9 +2169,11 @@ networkStartNetworkVirtual(struct networ
     }
 
 
+#ifdef DNSMASQ
     /* start dnsmasq if there are any IP addresses (v4 or v6) */
     if ((v4present || v6present) && networkStartDhcpDaemon(network) < 0)
         goto err3;
+#endif /* DNSMASQ */
 
     /* start radvd if there are any ipv6 addresses */
     if (v6present && networkStartRadvd(network) < 0)
@@ -2193,10 +2206,12 @@ networkStartNetworkVirtual(struct networ
     if (!save_err)
         save_err = virSaveLastError();
 
+#ifdef DNSMASQ
     if (network->dnsmasqPid > 0) {
         kill(network->dnsmasqPid, SIGTERM);
         network->dnsmasqPid = -1;
     }
+#endif /* DNSMASQ */
 
  err3:
     if (!save_err)
@@ -2248,8 +2263,10 @@ static int networkShutdownNetworkVirtual
         }
     }
 
+#ifdef DNSMASQ
     if (network->dnsmasqPid > 0)
         kill(network->dnsmasqPid, SIGTERM);
+#endif /* DNSMASQ */
 
     if (network->def->mac_specified) {
         char *macTapIfName = networkBridgeDummyNicName(network->def->bridge);
@@ -2267,11 +2284,13 @@ static int networkShutdownNetworkVirtual
 
     ignore_value(virNetDevBridgeDelete(network->def->bridge));
 
+#ifdef DNSMASQ
     /* See if its still alive and really really kill it */
     if (network->dnsmasqPid > 0 &&
         (kill(network->dnsmasqPid, 0) == 0))
         kill(network->dnsmasqPid, SIGKILL);
     network->dnsmasqPid = -1;
+#endif /* DNSMASQ */
 
     if (network->radvdPid > 0 &&
         (kill(network->radvdPid, 0) == 0))
@@ -2742,7 +2761,9 @@ static virNetworkPtr networkDefine(virCo
     virNetworkObjPtr network = NULL;
     virNetworkPtr ret = NULL;
     int ii;
+#ifdef DNSMASQ
     dnsmasqContext* dctx = NULL;
+#endif
 
     networkDriverLock(driver);
 
@@ -2799,6 +2820,7 @@ static virNetworkPtr networkDefine(virCo
         goto cleanup;
     }
 
+#ifdef DNSMASQ
     if (ipv4def) {
         dctx = dnsmasqContextNew(def->name, DNSMASQ_STATE_DIR);
         if (dctx == NULL ||
@@ -2806,6 +2828,7 @@ static virNetworkPtr networkDefine(virCo
             dnsmasqSave(dctx) < 0)
             goto cleanup;
     }
+#endif /* DNSMASQ */
 
     VIR_INFO("Defining network '%s'", def->name);
     ret = virGetNetwork(conn, def->name, def->uuid);
@@ -2813,7 +2836,9 @@ static virNetworkPtr networkDefine(virCo
 cleanup:
     if (freeDef)
        virNetworkDefFree(def);
+#ifdef DNSMASQ
     dnsmasqContextFree(dctx);
+#endif
     if (network)
         virNetworkObjUnlock(network);
     networkDriverUnlock(driver);
@@ -2859,6 +2884,7 @@ static int networkUndefine(virNetworkPtr
         }
     }
 
+#ifdef DNSMASQ
     if (dhcp_present) {
         char *leasefile;
         dnsmasqContext *dctx = dnsmasqContextNew(network->def->name, DNSMASQ_STATE_DIR);
@@ -2874,6 +2900,7 @@ static int networkUndefine(virNetworkPtr
         unlink(leasefile);
         VIR_FREE(leasefile);
     }
+#endif /* DNSMASQ */
 
     if (v6present) {
         char *configfile = networkRadvdConfigFileName(network->def->name);
@@ -2985,9 +3012,10 @@ networkUpdate(virNetworkPtr net,
             /* these sections all change things on the dnsmasq commandline,
              * so we need to kill and restart dnsmasq.
              */
+#ifdef DNSMASQ
             if (networkRestartDhcpDaemon(network) < 0)
                 goto cleanup;
-
+#endif
         } else if (section == VIR_NETWORK_SECTION_IP_DHCP_HOST) {
             /* if we previously weren't listening for dhcp and now we
              * are (or vice-versa) then we need to do a restart,
@@ -3005,11 +3033,13 @@ networkUpdate(virNetworkPtr net,
                 }
             }
 
+#ifdef DNSMASQ
             if ((newDhcpActive != oldDhcpActive &&
                 networkRestartDhcpDaemon(network) < 0) ||
                 networkRefreshDhcpDaemon(network) < 0) {
                 goto cleanup;
             }
+#endif
 
         } else if (section == VIR_NETWORK_SECTION_DNS_HOST ||
                    section == VIR_NETWORK_SECTION_DNS_TXT ||
@@ -3018,9 +3048,10 @@ networkUpdate(virNetworkPtr net,
              * can just update the config files and send SIGHUP to
              * dnsmasq.
              */
+#ifdef DNSMASQ
             if (networkRefreshDhcpDaemon(network) < 0)
                 goto cleanup;
-
+#endif
         }
 
         if (section == VIR_NETWORK_SECTION_IP) {
Index: libvirt-1.0.0/src/util/dnsmasq.c
===================================================================
--- libvirt-1.0.0.orig/src/util/dnsmasq.c
+++ libvirt-1.0.0/src/util/dnsmasq.c
@@ -21,6 +21,7 @@
 
 #include <config.h>
 
+#ifdef DNSMASQ
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@ -583,3 +584,4 @@ dnsmasqReload(pid_t pid ATTRIBUTE_UNUSED
 
     return 0;
 }
+#endif /* DNSMASQ */
