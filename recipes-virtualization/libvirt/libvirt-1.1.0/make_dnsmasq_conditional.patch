Index: libvirt-1.1.0/src/conf/network_conf.h
===================================================================
--- libvirt-1.1.0.orig/src/conf/network_conf.h
+++ libvirt-1.1.0/src/conf/network_conf.h
@@ -260,7 +260,9 @@ typedef virNetworkObj *virNetworkObjPtr;
 struct _virNetworkObj {
     virMutex lock;
 
+#ifdef DNSMASQ
     pid_t dnsmasqPid;
+#endif
     pid_t radvdPid;
     unsigned int active : 1;
     unsigned int autostart : 1;
Index: libvirt-1.1.0/src/network/bridge_driver.c
===================================================================
--- libvirt-1.1.0.orig/src/network/bridge_driver.c
+++ libvirt-1.1.0/src/network/bridge_driver.c
@@ -55,7 +55,9 @@
 #include "viruuid.h"
 #include "viriptables.h"
 #include "virlog.h"
+#ifdef DNSMASQ
 #include "virdnsmasq.h"
+#endif /* DNSMASQ */
 #include "configmake.h"
 #include "virnetdev.h"
 #include "virpci.h"
@@ -80,9 +82,11 @@ struct network_driver {
     char *networkAutostartDir;
     char *stateDir;
     char *pidDir;
-    char *dnsmasqStateDir;
     char *radvdStateDir;
+#ifdef DNSMASQ
+    char *dnsmasqStateDir;
     dnsmasqCapsPtr dnsmasqCaps;
+#endif
 };
 
 
@@ -125,6 +129,7 @@ static int networkUnplugBandwidth(virNet
 
 static struct network_driver *driverState = NULL;
 
+#ifdef DNSMASQ
 static char *
 networkDnsmasqLeaseFileNameDefault(const char *netname)
 {
@@ -147,6 +152,7 @@ networkDnsmasqConfigFileName(const char
                              driverState->dnsmasqStateDir, netname));
     return conffile;
 }
+#endif /* DNSMASQ */
 
 static char *
 networkRadvdPidfileBasename(const char *netname)
@@ -183,11 +189,13 @@ networkRemoveInactive(struct network_dri
 
     int ret = -1;
 
+#ifdef DNSMASQ
     /* remove the (possibly) existing dnsmasq and radvd files */
     if (!(dctx = dnsmasqContextNew(def->name,
                                    driverState->dnsmasqStateDir))) {
         goto cleanup;
     }
+#endif
 
     if (!(leasefile = networkDnsmasqLeaseFileName(def->name)))
         goto cleanup;
@@ -198,8 +206,10 @@ networkRemoveInactive(struct network_dri
     if (!(radvdpidbase = networkRadvdPidfileBasename(def->name)))
         goto no_memory;
 
+#ifdef DNSMASQ
     if (!(configfile = networkDnsmasqConfigFileName(def->name)))
         goto no_memory;
+#endif
 
     if (!(statusfile
           = virNetworkConfigFile(driverState->stateDir, def->name)))
@@ -279,9 +289,11 @@ networkFindActiveConfigs(struct network_
             if (obj->def->ips && (obj->def->nips > 0)) {
                 char *radvdpidbase;
 
+#ifdef DNSMASQ
                 ignore_value(virPidFileReadIfAlive(driverState->pidDir, obj->def->name,
                                                    &obj->dnsmasqPid,
                                                    dnsmasqCapsGetBinaryPath(driver->dnsmasqCaps)));
+#endif /* DNSMASQ */
 
                 if (!(radvdpidbase = networkRadvdPidfileBasename(obj->def->name))) {
                     virReportOOMError();
@@ -393,8 +405,10 @@ networkStateInitialize(bool privileged,
                        LOCALSTATEDIR "/lib/libvirt/network") < 0 ||
             VIR_STRDUP(driverState->pidDir,
                        LOCALSTATEDIR "/run/libvirt/network") < 0 ||
+#ifdef DNSMASQ
             VIR_STRDUP(driverState->dnsmasqStateDir,
                        LOCALSTATEDIR "/lib/libvirt/dnsmasq") < 0 ||
+#endif
             VIR_STRDUP(driverState->radvdStateDir,
                        LOCALSTATEDIR "/lib/libvirt/radvd") < 0)
             goto error;
@@ -412,8 +426,10 @@ networkStateInitialize(bool privileged,
                          "%s/network/lib", rundir) < 0) ||
             (virAsprintf(&driverState->pidDir,
                          "%s/network/run", rundir) < 0) ||
+#ifdef DNSMASQ
             (virAsprintf(&driverState->dnsmasqStateDir,
                          "%s/dnsmasq/lib", rundir) < 0) ||
+#endif
             (virAsprintf(&driverState->radvdStateDir,
                          "%s/radvd/lib", rundir) < 0)) {
             goto out_of_memory;
@@ -424,8 +440,10 @@ networkStateInitialize(bool privileged,
         goto out_of_memory;
     }
 
+#ifdef DNSMASQ
     /* if this fails now, it will be retried later with dnsmasqCapsRefresh() */
     driverState->dnsmasqCaps = dnsmasqCapsNewFromBinary(DNSMASQ);
+#endif
 
     if (virNetworkLoadAllState(&driverState->networks,
                                driverState->stateDir) < 0)
@@ -528,13 +546,17 @@ networkStateCleanup(void) {
     VIR_FREE(driverState->networkAutostartDir);
     VIR_FREE(driverState->stateDir);
     VIR_FREE(driverState->pidDir);
+#ifdef DNSMASQ
     VIR_FREE(driverState->dnsmasqStateDir);
+#endif
     VIR_FREE(driverState->radvdStateDir);
 
     if (driverState->iptables)
         iptablesContextFree(driverState->iptables);
 
+#ifdef DNSMASQ
     virObjectUnref(driverState->dnsmasqCaps);
+#endif
 
     networkDriverUnlock(driverState);
     virMutexDestroy(&driverState->lock);
@@ -544,7 +566,7 @@ networkStateCleanup(void) {
     return 0;
 }
 
-
+#ifdef DNSMASQ
 /* networkKillDaemon:
  *
  * kill the specified pid/name, and wait a bit to make sure it's dead.
@@ -1225,6 +1247,7 @@ networkRestartDhcpDaemon(struct network_
     /* now start dnsmasq if it should be started */
     return networkStartDhcpDaemon(driver, network);
 }
+#endif /* DNSMASQ */
 
 static char radvd1[] = "  AdvOtherConfigFlag off;\n\n";
 static char radvd2[] = "    AdvAutonomous off;\n";
@@ -1369,11 +1392,13 @@ networkStartRadvd(struct network_driver
 
     network->radvdPid = -1;
 
+#ifdef DNSMASQ
     /* Is dnsmasq handling RA? */
    if (DNSMASQ_RA_SUPPORT(driver->dnsmasqCaps)) {
         ret = 0;
         goto cleanup;
     }
+#endif
 
     if (!virNetworkDefGetIpByIndex(network->def, AF_INET6, 0)) {
         /* no IPv6 addresses, so we don't need to run radvd */
@@ -1451,6 +1476,7 @@ static int
 networkRefreshRadvd(struct network_driver *driver ATTRIBUTE_UNUSED,
                     virNetworkObjPtr network)
 {
+#ifdef DNSMASQ
     char *radvdpidbase;
 
     /* Is dnsmasq handling RA? */
@@ -1468,6 +1494,7 @@ networkRefreshRadvd(struct network_drive
         network->radvdPid = -1;
         return 0;
     }
+#endif
 
     /* if there's no running radvd, just start it */
     if (network->radvdPid <= 0 || (kill(network->radvdPid, 0) < 0))
@@ -1536,7 +1563,9 @@ networkRefreshDaemons(struct network_dri
              * dnsmasq and/or radvd, or restart them if they've
              * disappeared.
              */
+#ifdef DNSMASQ
             networkRefreshDhcpDaemon(driver, network);
+#endif
             networkRefreshRadvd(driver, network);
         }
         virNetworkObjUnlock(network);
@@ -1939,7 +1968,7 @@ networkAddGeneralIptablesRules(struct ne
             break;
     }
 
-    /* allow DHCP requests through to dnsmasq */
+    /* allow DHCP requests */
 
     if (iptablesAddTcpInput(driver->iptables, AF_INET,
                             network->def->bridge, 67) < 0) {
@@ -1971,7 +2000,7 @@ networkAddGeneralIptablesRules(struct ne
         VIR_WARN("May need to update iptables package & kernel to support CHECKSUM rule.");
     }
 
-    /* allow DNS requests through to dnsmasq */
+    /* allow DNS requests */
     if (iptablesAddTcpInput(driver->iptables, AF_INET,
                             network->def->bridge, 53) < 0) {
         virReportError(VIR_ERR_SYSTEM_ERROR,
@@ -1988,7 +2017,7 @@ networkAddGeneralIptablesRules(struct ne
         goto err4;
     }
 
-    /* allow TFTP requests through to dnsmasq if necessary */
+    /* allow TFTP requests through */
     if (ipv4def && ipv4def->tftproot &&
         iptablesAddUdpInput(driver->iptables, AF_INET,
                             network->def->bridge, 69) < 0) {
@@ -2568,11 +2597,12 @@ networkStartNetworkVirtual(struct networ
         goto err3;
     }
 
-
+#ifdef DNSMASQ
     /* start dnsmasq if there are any IP addresses (v4 or v6) */
     if ((v4present || v6present) &&
         networkStartDhcpDaemon(driver, network) < 0)
         goto err3;
+#endif /* DNSMASQ */
 
     /* start radvd if there are any ipv6 addresses */
     if (v6present && networkStartRadvd(driver, network) < 0)
@@ -2606,10 +2636,12 @@ networkStartNetworkVirtual(struct networ
     if (!save_err)
         save_err = virSaveLastError();
 
+#ifdef DNSMASQ
     if (network->dnsmasqPid > 0) {
         kill(network->dnsmasqPid, SIGTERM);
         network->dnsmasqPid = -1;
     }
+#endif /* DNSMASQ */
 
  err3:
     if (!save_err)
@@ -2662,8 +2694,10 @@ static int networkShutdownNetworkVirtual
         }
     }
 
+#ifdef DNSMASQ
     if (network->dnsmasqPid > 0)
         kill(network->dnsmasqPid, SIGTERM);
+#endif /* DNSMASQ */
 
     if (network->def->mac_specified) {
         char *macTapIfName = networkBridgeDummyNicName(network->def->bridge);
@@ -2681,11 +2715,13 @@ static int networkShutdownNetworkVirtual
 
     ignore_value(virNetDevBridgeDelete(network->def->bridge));
 
+#ifdef DNSMASQ
     /* See if its still alive and really really kill it */
     if (network->dnsmasqPid > 0 &&
         (kill(network->dnsmasqPid, 0) == 0))
         kill(network->dnsmasqPid, SIGKILL);
     network->dnsmasqPid = -1;
+#endif /* DNSMASQ */
 
     if (network->radvdPid > 0 &&
         (kill(network->radvdPid, 0) == 0))
@@ -3368,10 +3404,12 @@ networkUpdate(virNetworkPtr net,
 {
     struct network_driver *driver = net->conn->networkPrivateData;
     virNetworkObjPtr network = NULL;
-    int isActive, ret = -1, ii;
+    int isActive, ret = -1;
+#ifdef DNSMASQ
+    int ii;
     virNetworkIpDefPtr ipdef;
     bool oldDhcpActive = false;
-
+#endif
 
     virCheckFlags(VIR_NETWORK_UPDATE_AFFECT_LIVE |
                   VIR_NETWORK_UPDATE_AFFECT_CONFIG,
@@ -3389,6 +3427,7 @@ networkUpdate(virNetworkPtr net,
     if (virNetworkUpdateEnsureACL(net->conn, network->def, flags) < 0)
         goto cleanup;
 
+#ifdef DNSMASQ
     /* see if we are listening for dhcp pre-modification */
     for (ii = 0;
          (ipdef = virNetworkDefGetIpByIndex(network->def, AF_INET, ii));
@@ -3398,6 +3437,7 @@ networkUpdate(virNetworkPtr net,
             break;
         }
     }
+#endif
 
     /* VIR_NETWORK_UPDATE_AFFECT_CURRENT means "change LIVE if network
      * is active, else change CONFIG
@@ -3437,9 +3477,9 @@ networkUpdate(virNetworkPtr net,
             /* these sections all change things on the dnsmasq commandline,
              * so we need to kill and restart dnsmasq.
              */
+#ifdef DNSMASQ
             if (networkRestartDhcpDaemon(driver, network) < 0)
                 goto cleanup;
-
         } else if (section == VIR_NETWORK_SECTION_IP_DHCP_HOST) {
             /* if we previously weren't listening for dhcp and now we
              * are (or vice-versa) then we need to do a restart,
@@ -3462,7 +3502,7 @@ networkUpdate(virNetworkPtr net,
                 networkRefreshDhcpDaemon(driver, network) < 0) {
                 goto cleanup;
             }
-
+#endif
         } else if (section == VIR_NETWORK_SECTION_DNS_HOST ||
                    section == VIR_NETWORK_SECTION_DNS_TXT ||
                    section == VIR_NETWORK_SECTION_DNS_SRV) {
@@ -3470,9 +3510,10 @@ networkUpdate(virNetworkPtr net,
              * can just update the config files and send SIGHUP to
              * dnsmasq.
              */
+#ifdef DNSMASQ
             if (networkRefreshDhcpDaemon(driver, network) < 0)
                 goto cleanup;
-
+#endif
         }
 
         if (section == VIR_NETWORK_SECTION_IP) {
Index: libvirt-1.1.0/src/util/virdnsmasq.c
===================================================================
--- libvirt-1.1.0.orig/src/util/virdnsmasq.c
+++ libvirt-1.1.0/src/util/virdnsmasq.c
@@ -23,6 +23,7 @@
 
 #include <config.h>
 
+#ifdef DNSMASQ
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@ -896,3 +897,4 @@ dnsmasqCapsGet(dnsmasqCapsPtr caps, dnsm
     else
         return b;
 }
+#endif /* DNSMASQ */
