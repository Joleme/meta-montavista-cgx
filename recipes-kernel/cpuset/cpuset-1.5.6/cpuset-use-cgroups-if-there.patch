Index: cpuset-1.5.5/cpuset/cset.py
===================================================================
--- cpuset-1.5.5.orig/cpuset/cset.py	2011-08-24 17:52:36.697375349 -0500
+++ cpuset-1.5.5/cpuset/cset.py	2011-08-24 19:02:38.717374843 -0500
@@ -36,6 +36,7 @@
     # a relative path from this basepath.
     sets = {}
     basepath = ''
+    fprefix = ''
 
     def __init__(self, path=None):
         log.debug("initializing CpuSet")
@@ -45,13 +46,14 @@
             #       pass, but there are never many cpusets, so
             #       that optimization is left for the future
             log.debug("finding all cpusets")
-            path = self.locate_cpusets()
+            (path, fprefix) = self.locate_cpusets()
             CpuSet.basepath = path
             log.debug("creating root node at %s", path)
             self.__root = True
             self.name = 'root'
             self.path = '/'
             self.parent = self
+            CpuSet.fprefix = fprefix
             if (CpuSet.sets): 
                 del CpuSet.sets
                 CpuSet.sets = {}
@@ -104,7 +106,7 @@
                 log.debug("the cpuset %s already exists, skipping", path)
                 self = CpuSet.sets[path]  # questionable....
                 return
-            cpus = CpuSet.basepath + path + "/cpus"
+            cpus = CpuSet.basepath + path + "/" + CpuSet.fprefix + "cpus"
             if not os.access(cpus, os.F_OK):
                 # not a cpuset directory
                 str = '%s is not a cpuset directory' % (CpuSet.basepath + path)
@@ -116,9 +118,10 @@
 
     def locate_cpusets(self):
         log.debug("locating cpuset filesystem...")
-        cpuset = re.compile(r"none (/.+) cpuset .+")
-        cgroup = re.compile(r"none (/.+) cgroup .+")
+        cpuset = re.compile(r"[^ ]+ (/.+) cpuset .+")
+        cgroup = re.compile(r"[^ ]+ (/.+) cgroup .+")
         path = None
+        fprefix = ""
         f = file("/proc/mounts")
         for line in f:
             res = cpuset.search(line)
@@ -130,6 +133,7 @@
                     groups = line.split()
                     if re.search("cpuset", groups[3]):
                         path = groups[1]
+                        fprefix = "cpuset."
                         break
         f.close()
 
@@ -138,13 +142,14 @@
 
             if not os.access(config.mountpoint, os.F_OK):
                 os.mkdir(config.mountpoint)
-            ret = os.system("mount -t cpuset none " + config.mountpoint)
+            ret = os.system("mount -t cgroup none " + config.mountpoint)
             if ret:
                raise CpusetException(
                      'mount of cpuset filesystem failed, do you have permission?')
             path = config.mountpoint
+            fprefix = "cpuset."
         log.debug("cpusets mounted at: " + path)
-        return path
+        return (path, fprefix)
 
     def read_cpuset(self, path):
         log.debug("reading cpuset passed relpath: %s", path)
@@ -157,37 +162,47 @@
     def delprop(self):
         raise AttributeError, "deletion of properties not allowed"
 
+    def getpath(self, fname, doprefix=True):
+        if doprefix:
+            prefix = CpuSet.fprefix
+        else:
+            prefix = ""
+        return CpuSet.basepath + self.path + "/" + prefix + fname
+
     def getcpus(self): 
-        f = file(CpuSet.basepath+self.path+"/cpus")
-        return f.readline()[:-1]
+        f = file(self.getpath("cpus"))
+        cpus = f.readline()[:-1]
+        f.close()
+        return cpus
     def setcpus(self, newval):
         cpuspec_check(newval)
-        f = file(CpuSet.basepath+self.path+"/cpus",'w')
+        f = file(self.getpath("cpus"),'w')
         f.write(str(newval))
         f.close()
         log.debug("-> prop_set %s.cpus = %s", self.path, newval) 
     cpus = property(fget=getcpus, fset=setcpus, fdel=delprop, doc="CPU specifier")
 
     def getmems(self): 
-        f = file(CpuSet.basepath+self.path+"/mems")
-        return f.readline()[:-1]
+        f = file(self.getpath("mems"))
+        mems = f.readline()[:-1]
+        f.close()
+        return mems
     def setmems(self, newval): 
         # FIXME: check format for correctness
-        f = file(CpuSet.basepath+self.path+"/mems",'w')
+        f = file(self.getpath("mems"),'w')
         f.write(str(newval))
         f.close()
         log.debug("-> prop_set %s.mems = %s", self.path, newval) 
     mems = property(getmems, setmems, delprop, "Mem node specifier")
     
     def getcpuxlsv(self): 
-        f = file(CpuSet.basepath+self.path+"/cpu_exclusive")
-        if f.readline()[:-1] == '1':
-            return True
-        else:
-            return False
+        f = file(self.getpath("cpu_exclusive"))
+        cpuxlsv = f.readline()[:-1] == '1'
+        f.close()
+        return cpuxlsv
     def setcpuxlsv(self, newval):
         log.debug("-> prop_set %s.cpu_exclusive = %s", self.path, newval) 
-        f = file(CpuSet.basepath+self.path+"/cpu_exclusive",'w')
+        f = file(self.getpath("cpu_exclusive"),'w')
         if newval:
             f.write('1')
         else:
@@ -197,14 +212,13 @@
                              "CPU exclusive flag")
 
     def getmemxlsv(self): 
-        f = file(CpuSet.basepath+self.path+"/mem_exclusive")
-        if f.readline()[:-1] == '1':
-            return True
-        else:
-            return False
+        f = file(self.getpath("mem_exclusive"))
+        memxlsv = f.readline()[:-1] == '1'
+        f.close()
+        return memxlsv
     def setmemxlsv(self, newval):
         log.debug("-> prop_set %s.mem_exclusive = %s", self.path, newval) 
-        f = file(CpuSet.basepath+self.path+"/mem_exclusive",'w')
+        f = file(self.getpath("mem_exclusive"),'w')
         if newval:
             f.write('1')
         else:
@@ -214,9 +228,10 @@
                              "Memory exclusive flag")
 
     def gettasks(self):
-        f = file(CpuSet.basepath+self.path+"/tasks")
+        f = file(self.getpath("tasks", doprefix=False))
         lst = []
         for task in f: lst.append(task[:-1])
+        f.close()
         return lst
     def settasks(self, tasklist):
         notfound = []
@@ -229,7 +244,7 @@
             prog = False
         for task in tasklist:
             try:
-                f = file(CpuSet.basepath+self.path+"/tasks",'w')
+                f = file(self.getpath("tasks", doprefix=False),'w')
                 f.write(task)
                 f.close()
             except Exception, err:
Index: cpuset-1.5.5/cpuset/config.py
===================================================================
--- cpuset-1.5.5.orig/cpuset/config.py	2011-08-24 18:08:45.707375232 -0500
+++ cpuset-1.5.5/cpuset/config.py	2011-08-24 18:09:14.777375229 -0500
@@ -36,7 +36,7 @@
 defloc = '/etc/cset.conf'           # default config file location
 mread = False                       # machine readable output, usually set
                                     # via option -m/--machine 
-mountpoint = '/cpusets'             # cpuset filessytem mount point
+mountpoint = '/cgroup'              # cpuset filessytem mount point
 ############################################################################
 
 def ReadConfigFiles(path=None):
